// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should serve the OpenAPI UI 1`] = `
"<!DOCTYPE html>
<html>
  <head>
    <title>Swagger UI</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
      html {
          box-sizing: border-box;
          overflow: -moz-scrollbars-vertical;
          overflow-y: scroll;
      }
      *,
      *:before,
      *:after {
          box-sizing: inherit;
      }
      body {
        margin: 0;
        padding: 0;
        background: #fafafa;
      }
    </style>
    
      <link rel="stylesheet" type="text/css" href="./swagger-ui.css" >
    
  </head>
  <body>
    
      <div id="swagger-ui"></div>
      <script src="./swagger-ui-bundle.js"></script>
      <script src="./swagger-ui-standalone-preset.js"></script>
      <script src="./swagger-ui-init.js"></script>
    
  </body>
</html>
  "
`;

exports[`should serve the OpenAPI spec 1`] = `
{
  "components": {
    "schemas": {
      "apiRequestSchema": {
        "additionalProperties": false,
        "properties": {
          "features": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "description": {
                  "type": "string",
                },
                "enabled": {
                  "type": "boolean",
                },
                "impressionData": {
                  "type": "boolean",
                },
                "name": {
                  "type": "string",
                },
                "stale": {
                  "type": "boolean",
                },
                "strategies": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "constraints": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "contextName": {
                              "type": "string",
                            },
                            "operator": {
                              "description": "One of IN,NOT_IN,STR_ENDS_WITH,STR_STARTS_WITH,STR_CONTAINS,NUM_EQ,NUM_GT,NUM_GTE,NUM_LT,NUM_LTE,DATE_AFTER,DATE_BEFORE,SEMVER_EQ,SEMVER_GT,SEMVER_LT",
                              "type": "string",
                            },
                            "values": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                          "required": [
                            "contextName",
                            "operator",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "name": {
                        "type": "string",
                      },
                      "parameters": {
                        "type": "object",
                      },
                    },
                    "required": [
                      "name",
                      "constraints",
                      "parameters",
                    ],
                    "type": "object",
                  },
                  "type": "array",
                },
                "variants": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "name": {
                        "type": "string",
                      },
                      "overrides": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "contextName": {
                              "type": "string",
                            },
                            "values": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                          "required": [
                            "contextName",
                            "values",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "payload": {
                        "additionalProperties": false,
                        "properties": {
                          "type": {
                            "type": "string",
                          },
                          "value": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "type",
                          "value",
                        ],
                        "type": "object",
                      },
                      "stickiness": {
                        "type": "string",
                      },
                      "weight": {
                        "type": "number",
                      },
                    },
                    "required": [
                      "name",
                      "weight",
                      "overrides",
                    ],
                    "type": "object",
                  },
                  "type": "array",
                },
              },
              "required": [
                "name",
              ],
              "type": "object",
            },
            "type": "array",
          },
          "version": {
            "enum": [
              2,
            ],
            "type": "integer",
          },
        },
        "required": [
          "features",
          "version",
        ],
        "type": "object",
      },
      "featureSchema": {
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
          },
          "impressionData": {
            "type": "boolean",
          },
          "name": {
            "type": "string",
          },
          "variant": {
            "additionalProperties": false,
            "properties": {
              "enabled": {
                "type": "boolean",
              },
              "name": {
                "type": "string",
              },
              "payload": {
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "enum": [
                      "string",
                    ],
                    "type": "string",
                  },
                  "value": {
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "value",
                ],
                "type": "object",
              },
            },
            "required": [
              "name",
              "enabled",
            ],
            "type": "object",
          },
        },
        "required": [
          "name",
          "enabled",
          "impressionData",
        ],
        "type": "object",
      },
      "featuresSchema": {
        "additionalProperties": false,
        "properties": {
          "toggles": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "enabled": {
                  "type": "boolean",
                },
                "impressionData": {
                  "type": "boolean",
                },
                "name": {
                  "type": "string",
                },
                "variant": {
                  "additionalProperties": false,
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                    },
                    "name": {
                      "type": "string",
                    },
                    "payload": {
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "enum": [
                            "string",
                          ],
                          "type": "string",
                        },
                        "value": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "type",
                        "value",
                      ],
                      "type": "object",
                    },
                  },
                  "required": [
                    "name",
                    "enabled",
                  ],
                  "type": "object",
                },
              },
              "required": [
                "name",
                "enabled",
                "impressionData",
              ],
              "type": "object",
            },
            "type": "array",
          },
        },
        "required": [
          "toggles",
        ],
        "type": "object",
      },
      "lookupTogglesSchema": {
        "properties": {
          "context": {
            "properties": {
              "appName": {
                "type": "string",
              },
              "environment": {
                "type": "string",
              },
              "properties": {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                    },
                    {
                      "type": "number",
                    },
                  ],
                },
                "example": {
                  "betaTester": "true",
                  "region": "Africa",
                },
                "type": "object",
              },
              "remoteAddress": {
                "type": "string",
              },
              "sessionId": {
                "type": "string",
              },
              "userId": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "toggles": {
            "example": [
              "myToggle",
              "yourToggle",
            ],
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "registerClientSchema": {
        "properties": {
          "appName": {
            "description": "Name of the application using Unleash",
            "type": "string",
          },
          "environment": {
            "deprecated": true,
            "type": "string",
          },
          "instanceId": {
            "description": "Instance id for this application (typically hostname, podId or similar)",
            "type": "string",
          },
          "interval": {
            "description": "At which interval, in milliseconds, will this client be expected to send metrics",
            "type": "number",
          },
          "sdkVersion": {
            "description": "Optional field that describes the sdk version (name:version)",
            "type": "string",
          },
          "started": {
            "description": "When this client started. Should be reported as ISO8601 time.",
            "oneOf": [
              {
                "format": "date-time",
                "type": "string",
              },
              {
                "type": "number",
              },
            ],
          },
          "strategies": {
            "description": "List of strategies implemented by this application",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "appName",
          "interval",
          "started",
          "strategies",
        ],
        "type": "object",
      },
      "registerMetricsSchema": {
        "properties": {
          "appName": {
            "type": "string",
          },
          "bucket": {
            "properties": {
              "start": {
                "format": "date-time",
                "type": "string",
              },
              "stop": {
                "format": "date-time",
                "type": "string",
              },
              "toggles": {
                "additionalProperties": {
                  "properties": {
                    "no": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "variants": {
                      "additionalProperties": {
                        "minimum": 0,
                        "type": "integer",
                      },
                      "type": "object",
                    },
                    "yes": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
                "example": {
                  "myCoolToggle": {
                    "no": 42,
                    "variants": {
                      "blue": 6,
                      "green": 15,
                      "red": 46,
                    },
                    "yes": 25,
                  },
                  "myOtherToggle": {
                    "no": 100,
                    "yes": 0,
                  },
                },
                "type": "object",
              },
            },
            "required": [
              "start",
              "stop",
              "toggles",
            ],
            "type": "object",
          },
          "environment": {
            "type": "string",
          },
          "instanceId": {
            "type": "string",
          },
        },
        "required": [
          "appName",
          "instanceId",
          "bucket",
        ],
        "type": "object",
      },
      "unleashContextSchema": {
        "properties": {
          "appName": {
            "type": "string",
          },
          "environment": {
            "type": "string",
          },
          "properties": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                },
                {
                  "type": "number",
                },
              ],
            },
            "example": {
              "betaTester": "true",
              "region": "Africa",
            },
            "type": "object",
          },
          "remoteAddress": {
            "type": "string",
          },
          "sessionId": {
            "type": "string",
          },
          "userId": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "variantSchema": {
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
          },
          "name": {
            "type": "string",
          },
          "payload": {
            "additionalProperties": false,
            "properties": {
              "type": {
                "enum": [
                  "string",
                ],
                "type": "string",
              },
              "value": {
                "type": "string",
              },
            },
            "required": [
              "type",
              "value",
            ],
            "type": "object",
          },
        },
        "required": [
          "name",
          "enabled",
        ],
        "type": "object",
      },
    },
    "securitySchemes": {
      "apiKey": {
        "in": "header",
        "name": "authorization",
        "type": "apiKey",
      },
    },
  },
  "info": {
    "title": "Unleash Proxy API",
  },
  "openapi": "3.0.3",
  "paths": {
    "/proxy": {
      "get": {
        "description": "This endpoint returns the list of feature toggles that the proxy evaluates to enabled for the given context. Context values are provided as query parameters.",
        "parameters": [
          {
            "description": "Your application's name",
            "in": "query",
            "name": "appName",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The current user's ID",
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The current session's ID",
            "in": "query",
            "name": "sessionId",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Your application's IP address",
            "in": "query",
            "name": "remoteAddress",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Additional (custom) context fields",
            "example": {
              "betaTester": "true",
              "region": "Africa",
            },
            "explode": true,
            "in": "query",
            "name": "properties",
            "schema": {
              "additionalProperties": {
                "type": "string",
              },
              "type": "object",
            },
            "style": "form",
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema",
                },
              },
            },
            "description": "The list of enabled toggles for the provided context.",
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": "Whoops! We dropped the ball on this one (an unexpected error occurred): Cannot read properties of undefined (reading 'includes')",
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "error",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Something went wrong on the server side and we were unable to recover. If you have custom strategies loaded, make sure they don't throw errors.",
          },
          "503": {
            "content": {
              "text/plain": {
                "schema": {
                  "example": "The Unleash Proxy has not connected to the Unleash API and is not ready to accept requests yet.",
                  "type": "string",
                },
              },
            },
            "description": "The proxy isn't ready to accept requests yet.",
          },
        },
        "summary": "Retrieve enabled feature toggles for the provided context.",
        "tags": [
          "Proxy client",
        ],
      },
      "post": {
        "description": "This endpoint accepts a JSON object with \`context\` and \`toggles\` properties. The Proxy will use the provided context values and evaluate the toggles provided in the \`toggle\` property. It returns the toggles that evaluate to false. As such, the list it returns is always a subset of the toggles you provide it.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lookupTogglesSchema",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema",
                },
              },
            },
            "description": "The list of enabled toggles for the provided context.",
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": "Request validation failed",
                    "validation": [
                      {
                        "dataPath": ".body",
                        "keyword": "required",
                        "message": "should have required property 'appName'",
                        "params": {
                          "missingProperty": "appName",
                        },
                        "schemaPath": "#/components/schemas/registerMetricsSchema/required",
                      },
                    ],
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                    },
                    "validation": {
                      "items": {
                        "type": "object",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "error",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "The provided request data is invalid.",
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": "Whoops! We dropped the ball on this one (an unexpected error occurred): Cannot read properties of undefined (reading 'includes')",
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "error",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Something went wrong on the server side and we were unable to recover. If you have custom strategies loaded, make sure they don't throw errors.",
          },
          "503": {
            "content": {
              "text/plain": {
                "schema": {
                  "example": "The Unleash Proxy has not connected to the Unleash API and is not ready to accept requests yet.",
                  "type": "string",
                },
              },
            },
            "description": "The proxy isn't ready to accept requests yet.",
          },
        },
        "summary": "Which of the provided toggles are enabled given the provided context?",
        "tags": [
          "Proxy client",
        ],
      },
    },
    "/proxy/client/features": {
      "get": {
        "description": "Returns the toggle configuration from the proxy's internal Unleash SDK. Use this to bootstrap other proxies and server-side SDKs. Requires you to provide one of the proxy's configured \`serverSideTokens\` for authorization.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiRequestSchema",
                },
              },
            },
            "description": "The proxy's current feature toggle configuration. A list of feature toggles that is parseable by other server-side clients.",
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
          },
          "503": {
            "content": {
              "text/plain": {
                "schema": {
                  "example": "The Unleash Proxy has not connected to the Unleash API and is not ready to accept requests yet.",
                  "type": "string",
                },
              },
            },
            "description": "The proxy isn't ready to accept requests yet.",
          },
        },
        "summary": "Retrieve the proxy's current toggle configuration (as consumed by the internal client).",
        "tags": [
          "Server-side client",
        ],
      },
    },
    "/proxy/client/metrics": {
      "post": {
        "description": "This endpoint lets you register usage metrics with Unleash. Accepts either one of the proxy's configured \`serverSideTokens\` or one of its \`clientKeys\` for authorization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registerMetricsSchema",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "example": "ok",
                  "type": "string",
                },
              },
            },
            "description": "The request was successful.",
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": "Request validation failed",
                    "validation": [
                      {
                        "dataPath": ".body",
                        "keyword": "required",
                        "message": "should have required property 'appName'",
                        "params": {
                          "missingProperty": "appName",
                        },
                        "schemaPath": "#/components/schemas/registerMetricsSchema/required",
                      },
                    ],
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                    },
                    "validation": {
                      "items": {
                        "type": "object",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "error",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "The provided request data is invalid.",
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
          },
        },
        "summary": "Send usage metrics to Unleash.",
        "tags": [
          "Operational",
          "Server-side client",
        ],
      },
    },
    "/proxy/client/register": {
      "post": {
        "description": "This endpoint lets you register application with Unleash. Accepts either one of the proxy's configured \`serverSideTokens\` or one of its \`clientKeys\` for authorization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registerClientSchema",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "example": "ok",
                  "type": "string",
                },
              },
            },
            "description": "The request was successful.",
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": "Request validation failed",
                    "validation": [
                      {
                        "dataPath": ".body",
                        "keyword": "required",
                        "message": "should have required property 'appName'",
                        "params": {
                          "missingProperty": "appName",
                        },
                        "schemaPath": "#/components/schemas/registerMetricsSchema/required",
                      },
                    ],
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                    },
                    "validation": {
                      "items": {
                        "type": "object",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "error",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "The provided request data is invalid.",
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
          },
        },
        "summary": "Register clients with Unleash.",
        "tags": [
          "Operational",
          "Server-side client",
        ],
      },
    },
    "/proxy/health": {
      "get": {
        "description": "Returns a 200 OK if the proxy is ready to receive requests. Otherwise returns a 503 NOT READY.",
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "example": "ok",
                  "type": "string",
                },
              },
            },
            "description": "The request was successful.",
          },
          "503": {
            "content": {
              "text/plain": {
                "schema": {
                  "example": "The Unleash Proxy has not connected to the Unleash API and is not ready to accept requests yet.",
                  "type": "string",
                },
              },
            },
            "description": "The proxy isn't ready to accept requests yet.",
          },
        },
        "security": [],
        "summary": "Check whether the proxy is ready to serve requests yet.",
        "tags": [
          "Operational",
        ],
      },
    },
    "/proxy/internal-backstage/prometheus": {
      "get": {
        "description": "Returns a 200 and valid Prometheus text syntax if the proxy is ready to receive requests. Otherwise returns a 503 NOT READY.",
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "example": "metric_name 1",
                  "type": "string",
                },
              },
            },
            "description": "The request was successful. Response in plain text format conforming to Prometheus exposition format",
          },
          "503": {
            "content": {
              "text/plain": {
                "schema": {
                  "example": "The Unleash Proxy has not connected to the Unleash API and is not ready to accept requests yet.",
                  "type": "string",
                },
              },
            },
            "description": "The proxy isn't ready to accept requests yet.",
          },
        },
        "security": [],
        "summary": "Check whether the proxy is up and running",
        "tags": [
          "Operational",
        ],
      },
    },
  },
  "security": [
    {
      "apiKey": [],
    },
  ],
  "servers": [],
  "tags": [
    {
      "description": "Feature toggle endpoints intended to be consumed by proxy clients.",
      "name": "Proxy client",
    },
    {
      "description": "Feature toggle endpoints related to and intended to be consumed by server-side clients and other proxies.",
      "name": "Server-side client",
    },
    {
      "description": "Endpoints related to operating the Unleash proxy.",
      "name": "Operational",
    },
  ],
}
`;
